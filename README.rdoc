= Mongomatic

Mongomatic allows you to map your Ruby objects to Mongo documents. It is designed to be fast and simple.

== Basic Usage

  require 'mongomatic'
  
  class User < Mongomatic::Base
    validates_presence_of :name, :email
  end
  
  # set the db for all models:
  Mongomatic.db = Mongo::Connection.new.db("mongomatic_test")
  # or you can set it for a specific model:
  User.db = Mongo::Connection.new.db("mongomatic_test_user")

  u = User.new(:name => "Ben")
  => #<User:0x00000100d0cbf8 @doc={"name"=>"Ben"}, @removed=false> 
  u.valid?
  => false
  u["email"] = "me@somewhere.com"
  u.valid?
  => true
  u.insert
  => BSON::ObjectID('4c32834f0218236321000001')
  u
  => #<User:0x00000100d0cbf8 @doc={"name"=>"Ben", "email"=>"me@somewhere.com", "_id"=>BSON::ObjectID('4c32834f0218236321000001')}, @removed=false, @validation_context=nil, @errors={}, @_initialized_validate_callbacks=true>
  u["name"] = "Ben Myles"
  => "Ben Myles" 
  u.update
  => 142 
  
  cursor = User.find({"name" => "Ben Myles"})
  => #<Mongomatic::Cursor:0x00000100cf5110 @obj_class=User, @mongo_cursor=DBResponse(flags=, cursor_id=, start=)>  cursor.count
  cursor.count
  => 1 
  found = cursor.next
  => #<User:0x00000100ccd408 @doc={"_id"=>BSON::ObjectID('4c32c3720218236526000001'), "name"=>"Ben Myles", "email"=>"me@somewhere.com"}, @removed=false>
  found.remove
  => 72
  found
  => #<User:0x00000101091f80 @doc={"_id"=>BSON::ObjectID('4c32c4480218236538000001'), "name"=>"Ben Myles", "email"=>"me@somewhere.com"}, @removed=true> 
  cursor = User.find({"name" => "Ben Myles"})
  => #<Mongomatic::Cursor:0x00000100d9eb20 @obj_class=User, @mongo_cursor=DBResponse(flags=, cursor_id=, start=)> 
  cursor.count
  => 0 
  cursor.next
  => nil
  
  found = User.find_one({"name" => "Ben Myles"})
  => #<User:0x00000100ccd408 @doc={"_id"=>BSON::ObjectID('4c32c3720218236526000001'), "name"=>"Ben Myles", "email"=>"me@somewhere.com"}, @removed=false>
  found = User.find_one(BSON::ObjectID('4c32c3720218236526000001'))
  => #<User:0x00000100ccd408 @doc={"_id"=>BSON::ObjectID('4c32c3720218236526000001'), "name"=>"Ben Myles", "email"=>"me@somewhere.com"}, @removed=false>
  
== Indexes

Mongomatic doesn't do anything special to support indexes, but here's the suggested convention:

  class Person < Mongomatic::Base
    validates_presence_of :name, :email
  
    class << self
      def create_indexes
        collection.create_index("email", :unique => true)
      end
    end
  end
  
You can run Person.create_indexes whenever you add new indexes, it won't throw an error if they already exist.

If you have defined a unique index and want Mongomatic to raise an exception on a duplicate insert you need to use insert_safe or update_safe. The error thrown will be Mongo::OperationFailure. See the test suite for examples.

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Ben Myles. See LICENSE for details.
